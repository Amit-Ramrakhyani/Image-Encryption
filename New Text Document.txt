import numpy as np
from PIL import Image

def encryption(image_path):
    
    image = Image.open(image_path)
    
    resize_image = image.resize((5, 5))
    resize_image.save('resized_image.jpg')

    image = Image.open('resized_image.jpg')
    image_array = np.array(image)

    red_channel = image_array[:, :, 0]
    green_channel = image_array[:, :, 1]
    blue_channel = image_array[:, :, 2]

    # print(red_channel)
    # print(green_channel)
    # print(blue_channel)

    array = []
    text = ""
    for i in range(len(red_channel)):
        for j in range(3):
            for k in range(len(red_channel[0])):
                text += str(j) + str(image_array[i][k][j]) + str(i) + str(k) + " "
                array.append(j)
                array.append(image_array[i][k][j])
                array.append(i)
                array.append(k)
            
    return text
    # print(text)
    # print(array)

encryption('image.jpg')


import hashlib
from Crypto import Random
from Crypto.Cipher import AES
from base64 import b64encode, b64decode
import ImageToTextEncryption as itte

class AESCipher(object):
    
    def __init__(self, key):
        self.block_size = AES.block_size
        self.key = hashlib.sha256(key.encode()).digest()
        
    def __pad(self, plain_text):
        number_of_bytes_to_pad = self.block_size - len(plain_text) % self.block_size
        ascii_string = chr(number_of_bytes_to_pad)
        padding_str = number_of_bytes_to_pad * ascii_string
        padded_plain_text = plain_text + padding_str
        return padded_plain_text
    
    @staticmethod
    def __unpad(plain_text):
        last_character = plain_text[len(plain_text) - 1:]
        return plain_text[:-ord(last_character)]
    
    def encrypt(self, plain_text):
        plain_text = self.__pad(plain_text)
        iv = Random.new().read(self.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        encrypted_text = cipher.encrypt(plain_text.encode())
        return b64encode(iv + encrypted_text).decode("utf-8")
    
    def decrypt(self, encrypted_text):
        encrypted_text = b64decode(encrypted_text)
        iv = encrypted_text[:self.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        plain_text = cipher.decrypt(encrypted_text[self.block_size:]).decode("utf-8")
        return self.__unpad(plain_text)
    
if __name__ == "__main__":
    aes = AESCipher('1f6332526198f90e0b21b831948772ce')
    text = itte.encryption('image.jpg')
    print(text)
    encrypted = aes.encrypt(text)
    decrypted = aes.decrypt(encrypted)
    print("\n")
    print(encrypted)
    print("\n")
    print(decrypted)
    